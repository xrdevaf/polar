@using BlazorLocal.PageModels

<table class="table table-sm">
    <thead>
        <tr>
            <th><SortIcon Column="LogApplicationErrorId" Title="Id" Sort="@Sorting"></SortIcon></th>
            <th class="w-10"><SortIcon Column="UserData" Title="Benutzer" Sort="@Sorting"></SortIcon></th>
            <th class="w-10"><SortIcon Column="InsertDate" Title="Datum" Sort="@Sorting"></SortIcon></th>
            <th>Error</th>
            @if (IsUserMsg)
            {
                <th class="w-30">Message</th>
            }
            <th></th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td></td>
            <td><input type="search" class="form-control" @bind-value="@UserSearchText" @bind-value:event="oninput" /></td>
            <td>
                <input type="date" class="form-control" @bind-value="@DateSearch" />
            </td>
            <td><input type="search" class="form-control" @bind-value="@ErrorSearchText" @bind-value:event="oninput" /></td>
            @if (IsUserMsg)
            {
                <td></td>
            }
            <td></td>
        </tr>
        @foreach (var i in Model)
        {
            <tr>
                <td>@i.Id</td>
                <td>@GetLogUser(i.UserData)</td>
                <td>@i.InsertDate</td>
                <td>@i.ErrorMsg</td>
                @if (IsUserMsg)
                {
                    <td>@i.ErrorMsgUser</td>
                }
                <td><i class="btn glyphicon glyphicon-inbox" @onclick="@(()=>ShowStackTraceDialog(i.ErrorContext))" title="@GetTitle(i.ErrorContext)"></i></td>
            </tr>
        }
    </tbody>
</table>

<MatDialog @bind-IsOpen="@IsOpenDialogStackTrace" CanBeClosed="false">
    <MatDialogTitle Class="diHeader">
        <h3>Änderungen</h3>
        <div class="btn-group">
            <button @onclick="@(e => { IsOpenDialogStackTrace = false;})" class="btn btn-nav">X</button>
        </div>
    </MatDialogTitle>
    <MatDialogContent>
        <div style="font-size:14px;">
            @TextDialogStackTrace
        </div>
    </MatDialogContent>
</MatDialog>

@code {
    [Parameter] public List<ErrorLogModel> Model { get; set; }

    [Parameter] public bool IsUserMsg { get; set; } = false;
    [Parameter] public EventCallback<FilterErrorLogModel> FilteringEvn { get; set; }

    private bool IsOpenDialogStackTrace { get; set; }
    private string TextDialogStackTrace { get; set; }
    private FilterErrorLogModel Filter { get; set; }

    protected override Task OnInitializedAsync()
    {
        Filter = new FilterErrorLogModel();
        return base.OnInitializedAsync();
    }

    private string UserSearchText
    {
        get { return Filter.UserFltr; }
        set
        {
            Filter.UserFltr = value;
            Filtering();
        }
    }
    private string ErrorSearchText
    {
        get { return Filter.ErrorFltr; }
        set
        {
            Filter.ErrorFltr = value;
            Filtering();
        }
    }
    public DateTime? DateSearch
    {
        get { return Filter.DateFltr; }
        set
        {
            Filter.DateFltr = value;
            Filtering();
        }
    }

    protected void Sorting(KeyValuePair<string, string> pair)
    {
        Model = pair.Value == "desc" ? Model.OrderByDescending(x => x.GetType().GetProperty(pair.Key).GetValue(x, null)).ToList()
            : Model.OrderBy(x => x.GetType().GetProperty(pair.Key).GetValue(x, null)).ToList();
        StateHasChanged();
    }

    private string GetTitle(string text)
    {
        if (string.IsNullOrEmpty(text))
            return string.Empty;

        if (text.Length < 100)
            return text;

        return text.Substring(0, 100);
    }

    private void ShowStackTraceDialog(string text)
    {
        TextDialogStackTrace = text;
        IsOpenDialogStackTrace = true;
    }

    protected static string GetLogUser(string logUser)
    {
        if (string.IsNullOrEmpty(logUser))
            return "IsNullOrEmpty";

        return logUser.IndexOf("@") > 0 ? logUser.Substring(0, logUser.IndexOf("@")) : logUser;
    }

    private void Filtering()
    {
        FilteringEvn.InvokeAsync(Filter).GetAwaiter().GetResult();
        //ModelTmp = Model;
        //if (!String.IsNullOrEmpty(Filter.UserFltr))
        //{
        //    ModelTmp = ModelTmp.FindAll(r => r.UserData.ToLower().Contains(Filter.UserFltr.ToLower()));
        //}
        //if (!String.IsNullOrEmpty(Filter.ErrorFltr))
        //{
        //    ModelTmp = ModelTmp.FindAll(r => r.ErrorMsg.ToLower().Contains(Filter.ErrorFltr.ToLower()));
        //}
        //if (Filter.DateFltr != null)
        //{
        //    ModelTmp = ModelTmp.FindAll(r => r.InsertDate.ToShortDateString() == Filter.DateFltr?.ToShortDateString());
        //}
    }
}
